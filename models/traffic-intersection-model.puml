@startuml

enum TrafficLightStates <<fsm-state>> {
    RED
    AMBER
    GREEN
}

interface TrafficLightController {
    name: String <<inherited>>
    currentState: TrafficLightStates
    amber: StateFlow<Boolean>
    red: StateFlow<Boolean>
    green: StateFlow<Boolean>
    stopped: ReceiveChannel<Long>
    state: ReceiveChannel<TrafficLightStates>
    changeAmberTimeout(value: Long)
}

TrafficLightController .up.> TrafficLightStates

enum IntersectionStates <<fsm-state>> {
    STOPPING
    WAITING
    GOING
    STOPPED
}

enum IntersectionEvents <<fsm-event>> {
    SWITCH,
    STOPPED,
    STOP,
    START
}

interface TrafficIntersectionContext <<fsm-context>> {
    val cycleTime: Long
    val cycleWaitTime: Long
    suspend fun stateChanged(toState: IntersectionStates)
    suspend fun start() <<suspend>>
    suspend fun stop() <<suspend>>
    suspend fun next() <<suspend>>
    suspend fun off() <<suspend>>
}

class TrafficIntersectionFSM <<fsm>> {
    currentState: IntersectionStates
    allowedEvents(): Set<IntersectionEvents>
    startIntersection() <<suspend>>
    stopIntersection() <<suspend>>
    switchIntersection() <<suspend>>
    stopped() <<suspend>>
}

TrafficIntersectionFSM --> TrafficIntersectionContext: context
TrafficIntersectionFSM .right.> IntersectionEvents: events <<uses>>
TrafficIntersectionFSM ..> IntersectionStates: states <<uses>>

interface TrafficIntersectionController {
    amberTimeout: Long
    state: ReceiveChannel<IntersectionStates>
    stopped: ReceiveChannel<Long>
    currentName: String
    current: TrafficLightContext
    listOrder: List<String>
    trafficLights: List<TrafficLightController>
    get(name: String): TrafficLightController
    changeCycleTime(value: Long)
    changeCycleWaitTime(value: Long)
    changeAmberTimeout(value: Long)
    addTrafficLight(name: String, trafficLight: TrafficLightController)
    allowedEvents(): Set<IntersectionEvents>
    setupIntersection()
    stopped()
    startTrafficLight(name: String)
    startSystem()
    stopSystem()
    switch()
}

TrafficIntersectionController -right-|> TrafficIntersectionContext

class TrafficIntersectionService {
    state: ReceiveChannel<IntersectionStates>
    stopped: ReceiveChannel<Long>
    amberTimeout: Long
    changeAmberTimeout(value: Long)
    setupIntersection()
    listOrder: List<String>
    cycleTime: Long
        currentName: String
        current: TrafficLightContext
        cycleWaitTime: Long
        currentState: IntersectionStates
    get(name: String): TrafficLightController
    addTrafficLight(name: String, trafficLight: TrafficLightController)
    startTrafficLight(name: String)
    stateChanged(toState: IntersectionStates)
    changeCycleTime(value: Long)
    changeCycleWaitTime(value: Long)
    start()
    stop()
    off()
    next()
    startSystem()
    stopSystem()
    switch()
    stopped()
    allowedEvents(): Set<IntersectionEvents>
}

TrafficIntersectionService --|> TrafficIntersectionController
TrafficIntersectionService *--> TrafficIntersectionFSM: intersectionFSM <<private>>
TrafficIntersectionService -left-> TrafficLightController: trafficLights <<private>>

class TrafficIntersectionViewModel <<viewmodel>> #lightgreen {
    val amberTimeout: Long
    val cycleWaitTime: Long
    val cycleTime: Long
    val currentName: String

    val intersectionState: SharedFlow<IntersectionStates>
    val allowStart: StateFlow<Boolean>
    val allowSwitch: StateFlow<Boolean>
    val allowStop: StateFlow<Boolean>

    startSystem() <<suspend>>
    stopSystem() <<suspend>>
    switch() <<suspend>>
}

TrafficIntersectionViewModel *-right-> "1..n" TrafficLightController: trafficLights
TrafficIntersectionViewModel *---> TrafficIntersectionController: trafficIntersection

@enduml